/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.au.cc.gallery;

import com.google.gson.Gson;
import spark.Response;

import static spark.Spark.*;

public class App {
    public String getGreeting() {
        return "Hello LaToya";
    }

    private static Gson gson = new Gson();

    private static ImageService imageService = new ImageService();

    private static String listUsers() {
        try {
            UserDAO dao = Postgres.getUserDAO();
            return gson.toJson(dao.getUsers());
        } catch (Exception e) {
            return "Error: " + e.getMessage();
        }
    }

    private static String getUser(String username) {
        try {
            UserDAO dao = Postgres.getUserDAO();
            return dao.getUserByUsername(username).toString();
        } catch (Exception e) {
            return "Error: " + e.getMessage();
        }
    }

    private static String addUser(String username, String password, String fullName, Response r) {
        try {
            UserDAO dao = Postgres.getUserDAO();
            dao.addUser(new User(username, password, fullName));
            r.redirect("/users");
            return "";
        } catch (Exception e) {
            return "Error: " + e.getMessage();
        }
    }

    public static void main(String[] args) throws Exception {
        staticFiles.location("/public/build");

        String portString = System.getenv("JETTY_PORT");
        if (portString == null || portString.equals(""))
            port(8888);
        else
            port(Integer.parseInt(portString));

        new Admin().addRoutes();

        options("/*",
                (request, response) -> {

                    String accessControlRequestHeaders = request
                            .headers("Access-Control-Request-Headers");
                    if (accessControlRequestHeaders != null) {
                        response.header("Access-Control-Allow-Headers",
                                accessControlRequestHeaders);
                    }

                    String accessControlRequestMethod = request
                            .headers("Access-Control-Request-Method");
                    if (accessControlRequestMethod != null) {
                        response.header("Access-Control-Allow-Methods",
                                accessControlRequestMethod);
                    }

                    return "OK";
                });

        before((request, response) -> {
            response.header("Access-Control-Allow-Origin", "*");
        });

        get("/images/:username", (req, res) -> imageService.getImagesForUser(req.params(":username")));
        delete("/images/:imageID", (req, res) -> imageService.deleteImage(req.params(":imageID")));
        post("/images/upload/:username",
                "multipart/form-data",
                (request, response) -> imageService.uploadImage(request));

        get("/users", (req, res) -> listUsers());
        get("/users/:username", (req, res) -> getUser(req.params(":username")));
        get("/addUser/:username/:password/:fullName",
                (req, res) -> addUser(req.params(":username"), req.params(":password"), req.params(":fullName"), res));
    }
}

